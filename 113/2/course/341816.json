[
  {
    "name": "李旻璁",
    "email": "mtlee@ntut.edu.tw",
    "latestUpdate": "2024-12-16 11:04:33",
    "objective": "This course emphasizes understanding the algorithms behind programming solutions, rather than focusing solely on mastering a specific programming language. You will learn how to conceptualize, develop, and implement algorithms to solve engineering problems, with a dual-language approach to demonstrate versatility. Lectures will utilize Fortran to teach algorithmic fundamentals, while Python will be used to replicate tasks, showcasing how the same logic translates across languages.\n\nAn integral component of this course is leveraging Generative AI tools, such as ChatGPT, GitHub Copilot, and Replit, to aid in code generation, validation, and exploration of new programming paradigms. Students will develop skills to critically evaluate AI-generated code, refine it to meet their objectives, and learn new coding languages by building upon existing knowledge. Through this approach, you will gain confidence in creating robust and adaptable solutions for engineering challenges.",
    "schedule": "Part I: Theory and Tools (2-3 weeks)\n1. Introduction to Programming and GenAI Tools: Overview of the importance of programming in engineering, introduction to Generative AI tools like ChatGPT, GitHub Copilot, and Replit, and their role in coding. Discussing the choice of programming languages and fundamental programming concepts.\n2. Development Environment: Introduction to the Linux platform, vim editor, compilers, interpreters, and data visualization tools such as gnuplot. Focus on data collection, analysis, and visualization techniques.\nPart II: Fundamentals of Programming (7 weeks)\n1. Input and Output: Techniques for reading from and writing to different data sources.\n2. Variables and Declaration: Understanding data types, variable declaration, and scope.\n3. Mathematical Functions: Utilizing built-in math functions for engineering calculations.\n4. Control Structures: Implementing loops (do loops) and conditional statements (if statements) for flow control.\n5. Arrays and Data Handling: Managing and manipulating arrays for efficient data storage and retrieval.\n6. Subroutines and Modules: Creating reusable code with subroutines and modules; introduction to random number generation.\nPart III: Algorithm Development (4-6 weeks)\n1. Data Sorting: Techniques and algorithms for sorting data effectively.\n2. Statistical Analysis: Implementing algorithms for statistical computations and data interpretation.\n3. Probability and Histograms: Coding solutions for probability calculations and histogram generation.\n4. Regression Analysis: Developing algorithms for regression analysis to model and predict data trends.",
    "scorePolicy": "class participation: 60%\nIn-class quizzes (x4): (40%)\n\nThere is no midterm and final in this course. Students need to attend the class in person and answer questions on Zuvio to get scores for class participation.",
    "materials": "Online resources.",
    "consultation": "email / Zuvio",
    "課程對應SDGs指標": "SDG4：優質教育（Quality Education）SDG8：尊嚴就業與經濟發展（Decent Work and Economic Growth）SDG9：產業創新與基礎設施（Industry, Innovation and Infrastructure）",
    "remarks": "",
    "foreignLanguageTextbooks": false
  }
]
