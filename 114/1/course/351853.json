[
  {
    "name": "林濬璈",
    "email": "jalin@ntut.edu.tw",
    "latestUpdate": "2025-06-19 11:29:31",
    "objective": "本課程主要在研討傳統的結構化語言的編譯技術。課程所所涵蓋的內容包括有： - 語句上的分析、語句分析器的製作 - 由上而下的組譯器製作 - 由下而上的組譯器製作 - 語意分析 - 機器碼之產生與暫存器之配置 - 資料流分析的理論與應用 - 程式碼最佳化處理。課程的實施，將以基本編譯技術為主，作深入的介紹。學習所得的觀念與技術，將利用一個實驗性語言編譯器的實作來貫穿。因此，程式規畫實作，將在這個課程中，佔有相當大的比重。\nThis course discusses issues in the compilation of conventional block-structured languages, as listed below. - lexical analysis, scanner generators; - top-down parsing, LL (1) parsers; - bottom-up parsing SLR, LALR, LR (1) parsers, parser generators; - semantic analysis; - code generation and register allocation, code generator generators; - dataflow analysis: theory and practice; - code optimization. There will be a significant programming component to the course",
    "schedule": "Week 1: Introduction \nWeek 2: x86-64 Assembly Language\nWeek 3: TD Assembly Language\nWeek 4: Abstract Syntax, Semantics and Interpreter in OCaml\nWeek 5: TD Interpreter in Mini-Python\nWeek 6: Lexical Analysis\nWeek 7: Parsing: Syntax Analysis 1/2\nWeek 8: Parsing: Syntax Analysis 2/2\nWeek 9: TD Parsing -- Mini-Turtle\nWeek 10: Static Typing\nWeek 11: Parameter Passing\nWeek 12: Compiler of Functional Language\nWeek 13: Compiler of Object-Oriented Language\nWeek 14: TD Code Production\nWeek 15: Optimizing Compiler 1/2\nWeek 16: Optimizing Compiler 2/2\nWeek 17: Memory Allocation\nWeek 18: Final Exam",
    "scorePolicy": "Assignment: 30%\nFinal Project: 50%\nFinal Exam: 20%",
    "materials": "You may find the corresponding materials to the lectures in the following books.\n\n1. Alfred V. Aho, Monica S. Lam, Ravi Sethi et Jeffrey D. Ullman Modern Compilers: Principles, Techniques, and Tools. \n\n2. Benjamin C. Pierce Types and Programming Languages\n\n3. Randal E. Bryant et David R. O'Hallaron Computer Systems: A Programmer's Perspective\n\nOther relevant resources:\n- Nielson, Nielson, and Hankin. Principles of Program Analysis \n- Appel. Modern compiler implementation in ML (there are also Java/C versions) \n- Robert Harper. Practical Foundations for Programming Languages",
    "consultation": "Course website: TBAContact email: jalin@ntut.edu.tw",
    "課程對應SDGs指標": "SDG4：優質教育（Quality Education）",
    "課程是否導入AI": "● 鼓勵學生使用生成式 AI 工具（Encourage students to use generative AI tools）",
    "remarks": "Please install OCaml in your machine before the class. https://ocaml.org/Some learning resources:- resources provided on the official website above- Try OCaml is a tutorial you can follow in your browser.  https://try.ocamlpro.com/ - OCaml Programming: Correct + Efficient + Beautiful is fantastic and free to read online  https://cs3110.github.io/textbook/cover.html - so is The Real world OCaml  https://dev.realworldocaml.org/- Learn Programming with OCaml contains materials equivalent to the algorithm course but written in OCaml  https://usr.lmf.cnrs.fr/lpo/",
    "foreignLanguageTextbooks": false
  }
]
