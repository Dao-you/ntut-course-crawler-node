[{"name":"張原豪","email":"johnsonchang@ntut.edu.tw","latestUpdate":"2010-02-22 12:44:29","objective":"本課程主要在研討傳統的結構化語言的編譯技術。課程所所涵蓋的內容包括有：\n- 語句上的分析、語句分析器的製作\n- 由上而下的組譯器製作\n- 由下而上的組譯器製作\n- 語意分析\n- 機器碼之產生與暫存器之配置\n- 資料流分析的理論與應用\n- 程式碼最佳化處理\n課程的實施，將以基本編譯技術為主，作深入的介紹。學習所得的觀念與技術，將利用一個實驗性語言編譯器的實作來貫穿。因此，程式規畫實作，將在這個課程中，佔有相當大的比重。","schedule":"週次  單元主題\n1. Introduction to Compiler\n2. Overview: Syntax definition, syntax-directed translation, parsing\n3. Overview: Lexical analysis, symbol tables, intermediate code generation\n4. Lexical analysis: input buffering, token specification and recognition\n5. Lexical analysis: Introduction to the Lexical-Analyzer Generator: Lex\n6. Lexical analysis: Finite automata and regular expression\n7. Syntax analysis: context-free grammar, top-down parsing and bottom-up parsing\n8. Syntax analysis: LR parsing, parser generator\n9. Midterm exam\n10. Syntax-directed translation: syntax-directed definition (SSD), S-attributed and L-attributed\n11. Syntax-directed translation: postfix translation scheme, parser-stack implementation, eliminating left recursion\n12. Syntax-directed translation: on-the-fly code generation, LL parsing\n13. Intermediate-code generation: three-address code, types and declarations, type checking, control flow\n14. Intermediate-code generation: backpatching, switch-statements \n15. Run-time environment\n16. Code generation: design issues, basic blocks, flow graphs\n17. Code generation: optimization for basic blocks, peephole optimization, register allocation and assignment, tree rewriting\n18. Final exam","scorePolicy":"Homework: 30%\nMidterm: 30%\nFinal Exam: 30%\nIn-Class performance: 10% (不定時點名)","materials":"Compilers: Principles, Techniques, and Tools, second edition, 2007\nAuthors: Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman\nPublisher: Person International Edition\nISBN: 0-321-49169-6","foreignLanguageTextbooks":false}]
