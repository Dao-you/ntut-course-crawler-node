[{"name":"黃柏鈞","email":"pchuang.19840320@gmail.com","latestUpdate":"2021-02-17 14:30:15","objective":"This course introduces the basic concepts of object-oriented programming for undergraduate students. While C++11/14/17/20 will be the major programming language used, the concepts provided in this course can be fully adapted to other modern object-oriented programming languages, such as Python, Java, Go, Rust, and C#. In addition, we shall also cover the techniques and models necessary for modern software development in industrial companies. Please note that a considerable part of this course will be given in English.","schedule":"1. Introduction to programming languages and various programming paradigms.\n2. Introduction to object-oriented programming (OOP).\n3. Classes and static/dynamic typing systems.\n4. more on classes: instantiation and inheritance\n5. Static and dynamic binding\n6. Polymorphism\n7. Modern programming tools and environments\n8. Case studies and practice project","scorePolicy":"(Tentative and subject to change)\n\n20% * 2: midterm and final exams\n10% * 4: programming assignments\n20%: in-class participation","materials":"C++:\n* Stanley B. Lippman et al., C++ Primer, 5th Edition, Pearson, 2012.\n* Bjarne Stroustrup, The C++ Programming Language, 4th Edition, Pearson, 2013.\n* Stanley B. Lippman, Inside the C++ Object Model, Pearson, 1996.\n* John Lakos et al., Large-Scale C++ Volumes 1 and 2, Pearson, 2019.\n\nOOP:\n* Grady Booch et al., The Unified Modeling Language User Guide, 2nd edition, Pearson, 2005.\n* Erich Gamma et al., Design Patterns: Elements of Reusable Object-Oriented Software, Pearson, 1994.","foreignLanguageTextbooks":true}]
